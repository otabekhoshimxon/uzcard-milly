************** UzCard **************

-------- entity --------
1. Company
    id(uuid),
    name,
    address,
    email
    phone,
    created_date,
    status,
    visible,
    role(BANK,PAYMENT),
    username (unique),
    password

2. Profile - bular uzcard ni odamlari.
     id(uuid),
     name,
     surname,
     created_date,
     status,
     role(ADMIN,MODERATOR),
     username,
     password

3. Client (klientlar/mijozlar)
     id(uuid),
     name,
     surname,
     middle_name,
     created_date,
     phone(not unique),
     email
     status,
     password_seria,
     passport_number

     -> ( passport_seria + passport_number  unique)


3. Card
    id(uuid),
    number,
    expired_date,
    phone,
    status(ACTIVE,BLOCK,NO_ACTIVE),
    created_date,
    balance,
    client_id,
    company_id,

4. Transfer
    id (uuid),
    from_card_id,
    to_card_id,
    total_amount(5600),
    amount(5500),
    service_amount(100),
    service_percentage(1%),
    created_date,
    status(SUCCESS,FAILED,CANCELED),
    company_id

5. Transactions
    id(uuid),
    card_id,
    amount,
    transaction_type (CREDIT,DEBIT),
    transfer_id,
    created_date,
    status(CREATED,SUCCESS,FAILED,CANCELED)

****** Important ******
1. Amount and Balance in Long (mazgi tiyinda)
2. id - in uuid

****** API ******
1. Auth
    login - (username,password)

    // profile/login -> ADMIN
    // company/login -> Can do only COMPANY

2. Company
    1. Create (ADMIN)
    2. Update (ADMIN)
    3. Get Company pagination (ADMIN)
    4. Delete (ADMIN)

3. Profile
    1. Create  (ADMIN)
    2. Update  (ADMIN)
    3. Filter profile with pagination (ADMIN)

4. Client
    1. Create  (BANK)
    2. Update  (BANK)
    3. Filter profile with pagination (ADMIN - all) (BANK - only bank profile list)
    4. Get By profileId (ADMIN)(BANK if client was created by this profile)

4. Card
    1. Create (BANK)
    2. Change Status (BANK - to any status) (PAYMENT - only to BLOCK)
    3. Assign Phone (BANK)
    4. Get Card by cardId (PAYMENT - all, If BANK - It can take only card which was created by bank)
    4. Get Card List by phone (PAYMENT - all, If BANK - It can take only card which was created by bank)
    5. Get Card List By Client id (PAYMENT - all, If BANK - It can take only card which was created by bank)
    6. Get Card By number (PAYMENT - all, If BANK - It can take only card which was created by bank)
    7. Get Card balance by number (PAYMENT - all, If BANK - It can take only card which was created by bank)
    8. Filter (ADMIN)
        (phone,card_number,exp_date,created_date, balance,profile_name,status,client_id,client_name, client_status)

    cardInfo:
      id(uuid),number,expired_date,phone,status,created_date,balance, balance, profile(id,name,surname)
6. Transfer
    1. Create Transfer
        request: from_card_id, to_card_id, amount(5500)
        response: {    id,
                       from_card_id,
                       to_card_id,
                       amount(5500),
                       total_amount(5600),
                       service_amount(100),
                       payment_service_percentage(0.5%),
                       uzcard_service_percentage(0.5%),
                       status(CREATED)
                   }
    2. change status by TransferID (change status to SUCCESS or FAILED)
    3. Cancel Transfer by TransferID (if status ACTIVE change status to CANCELED, if SUCCESS not allow)
    4. Reverse Transfer by TransferID


5. Transaction
    1. Create (BANK, PAYMENT)
    2. Get Transaction pagination by cardId (BANK,PAYMENT)
    3. Get Transaction pagination by card Pan(number) (BANK,PAYMENT)
    4. Get transaction pagination  by profile_id (BANK,PAYMENT)
    5. Get transaction pagination by phone (active phone) (BANK,PAYMENT)
    6. Get CREDIT pagination by  cardId (BANK,PAYMENT)
    7. Get DEBIT pagination by cardId. (BANK,PAYMENT)
    8. Get Card  CREDIT and DEBIT  amount by monthly (oylik kirim va chiqim) by Card ID (BANK,CLIENT)
    9. Filter by: (ADMIN)
        client_id,cardNumber,cardId, amount (from_amount - to_amount),
            created_date (from_date, to_date), profile_name,status

    TransactionIfo
        id,fromCard{id,number,phone,client{id,name,surname}},
        ToCard{id,number,phone,client{id,name,surname}}, amount,createdDate,Status,transaction_type
      Muhim-> cardNumber should be hidden  8600-****-****-1212





4. Log
 1. Write logs in every controller
 3. Write logs to Transaction
        1. Write detail log to Transaction part
            pul o'tkazmasi uchun maydalab log yozing.
        2. If not enought balance or card status not ACTIVE write detail log.

* amal qilish muddati - cron
* cron update


*************** uzcard_demo Project ***************
1. Controller + Service + repository  lar qilinishi kerak.
2. Swagger ulanishi kerak.
3. Jwt deb bosh qotirmang.
4. API test in  PostMan or .http file
5. uuid in all entity
6. insertable = false, updatable = false in join tables
7. Log in every crud and making transaction (with detail)
8. Project Spring security with In Memory Authentication.
9. Validate all Api Data
10. Card number should be generated using random and check for existence (8600-****-****-****)
11. Heroku



